#!/usr/bin/env node

/**
 * Script para verificar que todos los casos de webhook est√©n llamando a syncSubscriptionFromStripe()
 * Asegura que BD-Stripe se sincronizar√°n autom√°ticamente en TODOS los eventos relevantes.
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const webhookPath = path.join(
  __dirname,
  "../../app/api/stripe/webhook/route.js"
);

console.log("üîç Verificando que todos los casos de webhook sincronicen desde Stripe...\n");

if (!fs.existsSync(webhookPath)) {
  console.error(`‚ùå Archivo no encontrado: ${webhookPath}`);
  process.exit(1);
}

const content = fs.readFileSync(webhookPath, "utf-8");

// Casos que deben sincronizar
const requiredCases = [
  "customer.subscription.created",
  "customer.subscription.updated",
  "customer.subscription.deleted",
  "invoice.paid"
];

// Verificar cada caso
console.log("üìã Casos a verificar:");
let allPassed = true;

requiredCases.forEach((caseLabel, index) => {
  const caseRegex = new RegExp(`case\\s+"${caseLabel.replace(/"/g, '\\"')}"`, "m");
  
  if (!caseRegex.test(content)) {
    console.log(`   ${index + 1}. ‚ùå ${caseLabel} - NO ENCONTRADO`);
    allPassed = false;
    return;
  }

  // Buscar syncSubscriptionFromStripe despu√©s de este case
  const caseIndex = content.indexOf(`case "${caseLabel}"`);
  const nextCaseIndex = content.indexOf("case ", caseIndex + 1);
  const caseContent = nextCaseIndex !== -1 
    ? content.substring(caseIndex, nextCaseIndex)
    : content.substring(caseIndex);

  // Verificar que contiene syncSubscriptionFromStripe o saveSubscriptionForUser
  const hasSyncCall = caseContent.includes("syncSubscriptionFromStripe");
  const hasSaveCall = caseContent.includes("saveSubscriptionForUser");

  if (hasSyncCall) {
    console.log(
      `   ${index + 1}. ‚úÖ ${caseLabel} - SINCRONIZA desde Stripe`
    );
  } else if (hasSaveCall) {
    console.log(
      `   ${index + 1}. ‚ö†Ô∏è  ${caseLabel} - Guarda en BD pero FALTA sincronizaci√≥n`
    );
    allPassed = false;
  } else {
    console.log(`   ${index + 1}. ‚ùå ${caseLabel} - NO actualiza BD`);
    allPassed = false;
  }
});

console.log("\nüìä Verificaci√≥n de importaciones:");

// Verificar que las funciones est√©n importadas
const hasSyncCallInFile = content.includes("syncSubscriptionFromStripe(");
const hasEmergencySyncCall = content.includes("emergencySyncIfNeeded");

if (hasSyncCallInFile) {
  console.log("   ‚úÖ syncSubscriptionFromStripe() se llama en el webhook");
} else {
  console.log("   ‚ùå FALTA llamadas a syncSubscriptionFromStripe()");
  allPassed = false;
}

if (hasEmergencySyncCall) {
  console.log("   ‚úÖ emergencySyncIfNeeded importada");
} else {
  console.log("   ‚ÑπÔ∏è  emergencySyncIfNeeded no est√° en uso (es complementaria)");
}

// Verificar que el archivo existe
const syncServicePath = path.join(
  __dirname,
  "../../app/api/services/sync.db.service.js"
);
if (fs.existsSync(syncServicePath)) {
  console.log(`   ‚úÖ Archivo de servicio de sincronizaci√≥n existe`);
} else {
  console.log(
    `   ‚ùå Archivo de servicio de sincronizaci√≥n NO existe: ${syncServicePath}`
  );
  allPassed = false;
}

console.log("\n" + "=".repeat(60));

if (allPassed) {
  console.log(
    "‚úÖ VERIFICACI√ìN EXITOSA - BD-Stripe estar√°n sincronizados en TODOS los webhooks"
  );
  console.log("\nüìù Resumen:");
  console.log("   - Checkout completado: saveSubscriptionForUser");
  console.log("   - Suscripci√≥n creada: syncSubscriptionFromStripe ‚úÖ");
  console.log("   - Suscripci√≥n actualizada: syncSubscriptionFromStripe ‚úÖ");
  console.log("   - Suscripci√≥n cancelada: syncSubscriptionFromStripe ‚úÖ");
  console.log("   - Factura pagada: syncSubscriptionFromStripe ‚úÖ");
  console.log("\nüéØ Beneficios:");
  console.log("   ‚Ä¢ Desincronizaci√≥n imposible - cada webhook sincroniza");
  console.log("   ‚Ä¢ Redundancia: saveSubscriptionForUser + syncSubscriptionFromStripe");
  console.log("   ‚Ä¢ Rollback autom√°tico si sync falla");
  console.log("   ‚Ä¢ Logging completo para debugging");
  process.exit(0);
} else {
  console.log(
    "‚ùå VERIFICACI√ìN FALLIDA - Hay casos de webhook sin sincronizaci√≥n"
  );
  console.log("\n‚ö†Ô∏è  Acci√≥n requerida:");
  console.log("   1. Revisa los casos marcados con ‚ùå o ‚ö†Ô∏è");
  console.log("   2. Aseg√∫rate que cada caso llame a syncSubscriptionFromStripe()");
  console.log("   3. Re-ejecuta este script para verificar");
  process.exit(1);
}
